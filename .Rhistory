dashboardBody(
fluidRow(
box(DT::dataTableOutput("x1"),width = 6, height = 619,title = "Table of genes", solidHeader = T, status = "primary"),
box(plotlyOutput("trendPlot",inline=F), title = "Plot highlighted gene", solidHeader = T, status = "danger"),
box(sliderInput('xl', label = NULL, max = 2100, min=-31, value = c(-31,2100)), title = "Set age range (weeks)",solidHeader = T, status = "danger", width = 3),
box(selectInput("region", label = NULL, choices=cc, selected = "All"), title = "Select Brain Region",solidHeader = T, status = "danger", width = 3, height = 137),
tags$style(type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"
)
)
)
)
server <- function(input, output) {
output$trendPlot <- renderPlotly({
s <- NULL
s <- input$x1_rows_selected
exx <- ex[s,]
g <- as.character(exx[1,dim(exx)[2]])
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
if(input$region!="All"){
d <- d[d$structure_acronym == input$region,]
} else{
d <- d
}
p <- ggplot(data = d, aes(x=Age, y=gene))+geom_point()+theme_classic()+geom_smooth(method="gam", formula = y~s(x), se=T)+ylab("Expression level")+xlim(c(input$xl[1],input$xl[2]))+ggtitle(g)+ theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
})
output$x1 <- DT::renderDataTable({
res[, c(-2:-6)] <- round(res[, c(-2:-6)],0)
res[, c(-1,-3,-5)] <- round(res[, c(-1,-3,-5)],2)
res[, c(-1,-2,-4,-5,-6)] <- round(res[, c(-1,-2,-4,-5,-6)],4)
res[, c(-1:-4,-6)] <- signif(res[, c(-1:-4,-6)], 2)
dt <- DT::datatable(res,filter = 'top', rownames=T, options = list(searchHighlight = TRUE, search = list(regex = TRUE), lengthChange=F),selection = 'single')
dt
})
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "green",
dashboardHeader(title = "Brain Span Gene Expression", titleWidth = 300),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(DT::dataTableOutput("x1"),width = 6, height = 619,title = "Table of genes", solidHeader = T, status = "primary"),
box(plotlyOutput("trendPlot",inline=F), title = "Plot highlighted gene", solidHeader = T, status = "danger"),
box(sliderInput('xl', label = NULL, max = 2100, min=-31, value = c(-31,2100)), title = "Set age range (weeks)",solidHeader = T, status = "danger", width = 3),
box(selectInput("region", label = NULL, choices=cc, selected = "All"), title = "Select Brain Region",solidHeader = T, status = "danger", width = 3, height = 137),
tags$style(type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"
)
)
)
)
server <- function(input, output) {
output$trendPlot <- renderPlotly({
s <- NULL
s <- input$x1_rows_selected
exx <- ex[s,]
g <- as.character(exx[1,dim(exx)[2]])
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
if(input$region!="All"){
d <- d[d$structure_acronym == input$region,]
} else{
d <- d
}
p <- ggplot(data = d, aes(x=Age, y=gene))+geom_point()+theme_classic()+geom_smooth(method="gam", formula = y~s(x), se=T)+ylab("Expression level")+xlim(c(input$xl[1],input$xl[2]))+ggtitle(g)+ theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
})
output$x1 <- DT::renderDataTable({
res[, c(-2:-6)] <- round(res[, c(-2:-6)],0)
res[, c(-1,-3,-5)] <- round(res[, c(-1,-3,-5)],2)
res[, c(-1,-2,-4,-5,-6)] <- round(res[, c(-1,-2,-4,-5,-6)],4)
res[, c(-1:-4,-6)] <- signif(res[, c(-1:-4,-6)], 2)
dt <- DT::datatable(res,filter = 'top', rownames=T, options = list(searchHighlight = TRUE, search = list(regex = TRUE), lengthChange=F),selection = 'single')
dt
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
library(schoolmath)
library(ggplot2)
library(gratia)
library(mgcv)
library(parallel)
library(tidymv)
library(tidyverse)
library(shiny)
library(plotly)
library(DT)
library(shinydashboard)
ex <- read.csv("~/Documents/The Marcus Autism Center/Brainspan/genes_matrix_csv/expression_matrix.csv", head=F )
ex <- ex[, 2:dim(ex)[2]]
co <- read.csv("~/Documents/The Marcus Autism Center/Brainspan/genes_matrix_csv/columns_metadata.csv", head=T)
ro <- read.csv("~/Documents/The Marcus Autism Center/Brainspan/genes_matrix_csv/rows_metadata.csv", head=T)
ex$symbol <- ro$gene_symbol
cc <- as.character(unique(co$structure_acronym))
cc <- c("All",cc)
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
m <- max(d$gene)
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
line <- as.data.frame(summary(gam_mod)$edf)
#d2 <- d[d$Age<156,]
#gam_mod2 <- gam(gene ~ s(Age), data = d2)
#line2 <- as.data.frame(summary(gam_mod2)$edf)
p <- as.data.frame(summary(gam_mod)$s.pv)
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y$deriv2 <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$deriv[x]-new_y$deriv[x+1]))
#new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
rownames(new_y) <- new_y$Age
#new_y$slope <- sum(new_y$deriv2)
tt <- new_y[order(abs(new_y$deriv)),][1:10,]
#vv <- as.data.frame(var(tt$Age))
dd <- new_y[which.max(abs(new_y$deriv)),][,c(1,5)]
min.deriv <- new_y[which.min(abs(new_y$deriv)),][,c(5)]
dd <- t(data.frame(dd, min.deriv, line, p, m))
rownames(dd) <- c("Age max deriv", "Max deriv", "Min deriv", "edf", "p-value smooth", "Max expression")
colnames(dd) <- ro$gene_symbol[x]
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1000, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
ui <- dashboardPage(skin = "green",
dashboardHeader(title = "Brain Span Gene Expression", titleWidth = 300),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(DT::dataTableOutput("x1"),width = 6, height = 619,title = "Table of genes", solidHeader = T, status = "primary"),
box(plotlyOutput("trendPlot",inline=F), title = "Plot highlighted gene", solidHeader = T, status = "danger"),
box(sliderInput('xl', label = NULL, max = 2100, min=-31, value = c(-31,2100)), title = "Set age range (weeks)",solidHeader = T, status = "danger", width = 3),
box(selectInput("region", label = NULL, choices=cc, selected = "All"), title = "Select Brain Region",solidHeader = T, status = "danger", width = 3, height = 137),
tags$style(type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"
)
)
)
)
server <- function(input, output) {
output$trendPlot <- renderPlotly({
s <- NULL
s <- input$x1_rows_selected
exx <- ex[s,]
g <- as.character(exx[1,dim(exx)[2]])
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
if(input$region!="All"){
d <- d[d$structure_acronym == input$region,]
} else{
d <- d
}
p <- ggplot(data = d, aes(x=Age, y=gene))+geom_point()+theme_classic()+geom_smooth(method="gam", formula = y~s(x), se=T)+ylab("Expression level")+xlim(c(input$xl[1],input$xl[2]))+ggtitle(g)+ theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
})
output$x1 <- DT::renderDataTable({
res[, c(-2:-6)] <- round(res[, c(-2:-6)],0)
res[, c(-1,-3,-5)] <- round(res[, c(-1,-3,-5)],2)
res[, c(-1,-2,-4,-5,-6)] <- round(res[, c(-1,-2,-4,-5,-6)],4)
res[, c(-1:-4,-6)] <- signif(res[, c(-1:-4,-6)], 2)
dt <- DT::datatable(res,filter = 'top', rownames=T, options = list(searchHighlight = TRUE, search = list(regex = TRUE), lengthChange=F),selection = 'single')
dt
})
}
shinyApp(ui, server)
6*365
13000/2190
exx <- ex[1,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
d <- d[d$Age>-1 & d$Age<157,]
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
colnames(new_y) <- ro$gene_symbol[x]
d
exx <- ex[1,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
colnames(new_y) <- ro$gene_symbol[x]
new_y
res <- t(do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- new_y$deriv
colnames(dd) <- ro$gene_symbol[x]
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- as.data.frame(new_y$deriv)
colnames(dd) <- ro$gene_symbol[x]
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
res
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- t(as.data.frame(new_y$deriv))
colnames(dd) <- ro$gene_symbol[x]
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- t(as.data.frame(new_y$deriv))
#colnames(dd) <- ro$gene_symbol[x]
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
res
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- t(as.data.frame(ro$gene_symbol[x]=new_y$deriv))
#colnames(dd) <-
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- t(as.data.frame(new_y$deriv))
colnames(dd) <-ro$gene_symbol[x]
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
exx <- ex[1,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- t(as.data.frame(new_y$deriv))
dd
exx <- ex[1,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- as.data.frame(new_y$deriv)
dd
colnames(dd) <-ro$gene_symbol[1]
dd
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- as.data.frame(new_y$deriv)
colnames(dd) <-ro$gene_symbol[x]
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
res
res <- do.call(cbind, mclapply(1:1, function(x) proc(x), mc.cores=4, mc.cleanup = T))
res
res <- do.call(cbind, mclapply(1:5, function(x) proc(x), mc.cores=4, mc.cleanup = T))
res
cor(res)
shinyApp(ui, server)
res <- do.call(cbind, mclapply(1:500, function(x) proc(x), mc.cores=4, mc.cleanup = T))
cor(res)
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
#new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
dd <- as.data.frame(new_y$deriv)
colnames(dd) <-ro$gene_symbol[x]
return(dd)
}
res <- do.call(cbind, mclapply(1:50, function(x) proc(x), mc.cores=4, mc.cleanup = T))
cor(res)
res
cor(res)
tail(res)
res <- res[1:999,]
cor(res)
proc <- function(x){
exx <- ex[x,]
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
m <- max(d$gene)
gam_mod <- gam(gene ~ s(Age), data = d)
new_y <- as.data.frame(predict_gam(gam_mod, length_out = 1000))
line <- as.data.frame(summary(gam_mod)$edf)
#d2 <- d[d$Age<156,]
#gam_mod2 <- gam(gene ~ s(Age), data = d2)
#line2 <- as.data.frame(summary(gam_mod2)$edf)
p <- as.data.frame(summary(gam_mod)$s.pv)
new_y$norm <- 100*((new_y$fit-min(new_y$fit))/(max(new_y$fit)-min(new_y$fit)))
new_y$deriv <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$norm[x]-new_y$norm[x+1]))
new_y$deriv2 <- unlist(lapply(1:dim(new_y)[1], function(x) new_y$deriv[x]-new_y$deriv[x+1]))
#new_y <- new_y[new_y$Age>-1 & new_y$Age<157,]
rownames(new_y) <- new_y$Age
#new_y$slope <- sum(new_y$deriv2)
tt <- new_y[order(abs(new_y$deriv)),][1:10,]
#vv <- as.data.frame(var(tt$Age))
dd <- new_y[which.max(abs(new_y$deriv)),][,c(1,5)]
min.deriv <- new_y[which.min(abs(new_y$deriv)),][,c(5)]
dd <- t(data.frame(dd, min.deriv, line, p, m))
rownames(dd) <- c("Age max deriv", "Max deriv", "Min deriv", "edf", "p-value smooth", "Max expression")
colnames(dd) <- ro$gene_symbol[x]
return(dd)
}
res <- t(do.call(cbind, mclapply(1:1000, function(x) proc(x), mc.cores=4, mc.cleanup = T)))
ui <- dashboardPage(skin = "green",
dashboardHeader(title = "Brain Span Gene Expression", titleWidth = 300),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(DT::dataTableOutput("x1"),width = 6, height = 619,title = "Table of genes", solidHeader = T, status = "primary"),
box(plotlyOutput("trendPlot",inline=F), title = "Plot highlighted gene", solidHeader = T, status = "danger"),
box(sliderInput('xl', label = NULL, max = 2100, min=-31, value = c(-31,2100)), title = "Set age range (weeks)",solidHeader = T, status = "danger", width = 3),
box(selectInput("region", label = NULL, choices=cc, selected = "All"), title = "Select Brain Region",solidHeader = T, status = "danger", width = 3, height = 137),
tags$style(type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"
)
)
)
)
server <- function(input, output) {
output$trendPlot <- renderPlotly({
s <- NULL
s <- input$x1_rows_selected
exx <- ex[s,]
g <- as.character(exx[1,dim(exx)[2]])
d <- cbind(co, t(exx[,1:(dim(exx)[2]-1)]))
d$scale <- ifelse(grepl(" yrs", d$age), 52, ifelse(grepl(" pcw", d$age), -1, 4.33))
d$ag <- as.numeric(gsub(" mos| yrs| pcw", "", d$age))
d$Age <- d$ag*d$scale
d$Age <- ifelse(is.negative(d$Age), -(d$Age+38), d$Age)
colnames(d)[9] <- "gene"
if(input$region!="All"){
d <- d[d$structure_acronym == input$region,]
} else{
d <- d
}
p <- ggplot(data = d, aes(x=Age, y=gene))+geom_point()+theme_classic()+geom_smooth(method="gam", formula = y~s(x), se=T)+ylab("Expression level")+xlim(c(input$xl[1],input$xl[2]))+ggtitle(g)+ theme(plot.title = element_text(hjust = 0.5))
ggplotly(p)
})
output$x1 <- DT::renderDataTable({
res[, c(-2:-6)] <- round(res[, c(-2:-6)],0)
res[, c(-1,-3,-5)] <- round(res[, c(-1,-3,-5)],2)
res[, c(-1,-2,-4,-5,-6)] <- round(res[, c(-1,-2,-4,-5,-6)],4)
res[, c(-1:-4,-6)] <- signif(res[, c(-1:-4,-6)], 2)
dt <- DT::datatable(res,filter = 'top', rownames=T, options = list(searchHighlight = TRUE, search = list(regex = TRUE), lengthChange=F),selection = 'single')
dt
})
}
shinyApp(ui, server)
system("ls")
system("samtools")
install.packages("learnr")
https://github.com/UEABIO/apps.git
rsconnect::setAccountInfo(name='biouea', token='3C3CC0DD557444F3FD30EB6E7EA896A7', secret='N6YyTUXW10y7WJ3TbCa9mwTi/jo41tuf3YLpPnWu')
deployApp()
library(rsconnect)
deployApp()
heights_island1 <- rnorm(50,10,2)
my_median <- function(vector){
ordered_heights <- sort(vector, decreasing = FALSE)
if(length(ordered_heights) %% 2 == 0){
position1 <- length(ordered_heights) / 2
position2 <- position1 + 1
temp_values <- ordered_heights[c(position1, position2)]
median <- mean(temp_values)
}else{
position <- (length(ordered_heights) + 1) / 2
median <- ordered_heights[position]
}
return(median)
}
my_median(heights_island1)
median(heights_island1)
update.packages("learnr")
